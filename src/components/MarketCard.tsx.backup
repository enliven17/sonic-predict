import styled from "styled-components";
import { useState } from "react";
import { FaClock, FaCheckCircle, FaTimesCircle, FaCoins, FaUsers, FaCalendarAlt, FaChartLine } from 'react-icons/fa';
import { useWalletConnection } from '@/hooks/useWalletConnection';
import { useDispatch, useSelector } from 'react-redux';
import { addBet } from '@/store/marketsSlice';
import { sonicClient } from '@/api/sonicClient';
import type { RootState } from '@/store';
import type { Market, BetSide } from '@/types/market';
import { ethers } from 'ethers';
import { TREASURY_ADDRESS, calculateBetFee, calculateTotalBetAmount } from '@/config/sonic';
import { BetSuccessModal } from './BetSuccessModal';
import { useNotification } from '@/contexts/NotificationContext';

interface Props {
  market: Market;
  onClick?: () => void;
}

export const MarketCard: React.FC<Props> = ({ market, onClick }) => {
  const dispatch = useDispatch();
  const { address, isConnected } = useSelector((state: RootState) => state.wallet);
  const { showNotification } = useNotification();
  const [qty, setQty] = useState(1);
  const [loading, setLoading] = useState<BetSide | false>(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [successBetData, setSuccessBetData] = useState<{
    side: 'yes' | 'no';
    amount: number;
    fee: number;
    totalAmount: number;
    marketTitle: string;
    treasuryTxHash: string;
  } | null>(null);
  const [showErrorModal, setShowErrorModal] = useState(false);
  const [errorData, setErrorData] = useState<{
    title: string;
    message: string;
    type: 'user_rejected' | 'insufficient_balance' | 'network_error' | 'general';
    details?: string;
  } | null>(null);

  const handleCardClick = (_e: React.MouseEvent) => {};

  const getStatusIcon = () => {
    if (market.status === "resolved") {
      return market.result === "yes" ? <FaCheckCircle /> : <FaTimesCircle />;
    }
    return <FaClock />;
  };

  const getStatusColor = () => {
    if (market.status === "resolved") {
      return market.result === "yes" ? "green" : "red";
    }
    return "blue";
  };

  const totalPool = market.initialPool + market.bets.reduce((sum, b) => sum + b.amount, 0);
  const totalBets = market.bets.length;
  const timeLeft = market.closesAt - Date.now();
  const daysLeft = Math.ceil(timeLeft / (1000 * 60 * 60 * 24));
  const yesSum = market.bets.filter(b => b.side === 'yes').reduce((s, b) => s + b.amount, 0);
  const noSum = market.bets.filter(b => b.side === 'no').reduce((s, b) => s + b.amount, 0);
  const volume = yesSum + noSum;
  const yesProb = volume > 0 ? Math.round((yesSum / volume) * 100) : 50;
  
  // User's bets on this market (from localStorage + Redux)
  const getUserBets = () => {
    if (!address) return [];
    
    // localStorage'dan user bets yükle
    let userBets: any[] = [];
    try {
      const stored = localStorage.getItem('sonic_user_bets');
      if (stored) {
        const userBetsData = JSON.parse(stored);
        userBets = userBetsData[address] || [];
      }
    } catch (e) {
      console.warn('Failed to load user bets from localStorage:', e);
    }
    
    // Bu market için olan bet'leri filtrele
    return userBets.filter(bet => bet.marketId === market.id);
  };
  
  const userBets = getUserBets();
  const userYesBets = userBets.filter(b => b.side === 'yes').reduce((s, b) => s + b.amount, 0);
  const userNoBets = userBets.filter(b => b.side === 'no').reduce((s, b) => s + b.amount, 0);

  const explorerTxUrl = market.txHash
    ? `https://testnet.sonicscan.org/tx/${market.txHash}`
    : undefined;
  const shortTx = market.txHash ? `${market.txHash.slice(0, 6)}...${market.txHash.slice(-4)}` : 'contract';

  const handleBet = async (side: BetSide) => {
    if (!address || !isConnected) {
      alert('Please connect your MetaMask wallet first');
      return;
    }

    if (qty <= 0) {
      alert('Please enter a valid bet amount');
      return;
    }

    try {
      setLoading(side);
      
      // Get MetaMask signer
      const { ethereum } = window as any;
      if (!ethereum) {
        throw new Error('MetaMask not found');
      }

      const provider = new ethers.BrowserProvider(ethereum);
      const signer = await provider.getSigner();
      
      // Calculate bet amounts
      const betAmount = qty * 0.5; // Base bet amount
      const fee = calculateBetFee(betAmount); // 0.5% fee
      const totalAmount = calculateTotalBetAmount(betAmount); // Total including fee
      
      console.log(`Bet Amount: ${betAmount} S, Fee: ${fee} S, Total: ${totalAmount} S`);
      
      // Check user balance
      const balance = await provider.getBalance(address);
      const balanceInEth = ethers.formatEther(balance);
      
      if (parseFloat(balanceInEth) < totalAmount) {
        throw new Error(`Insufficient balance. You have ${parseFloat(balanceInEth).toFixed(4)} S, need ${totalAmount.toFixed(4)} S`);
      }
      
      // Create bet message to sign
      const betMessage = `Place ${side.toUpperCase()} bet on ${market.title}\nAmount: ${betAmount.toFixed(4)} S\nFee: ${fee.toFixed(4)} S\nTotal: ${totalAmount.toFixed(4)} S\nMarket ID: ${market.id}\nTimestamp: ${Date.now()}`;
      
      // Sign the message
      const signature = await signer.signMessage(betMessage);
      
      // Send S tokens to treasury
      const tx = await signer.sendTransaction({
        to: TREASURY_ADDRESS,
        value: ethers.parseEther(totalAmount.toString()),
        gasLimit: 100000
      });
      
      console.log('Sending S tokens to treasury:', tx.hash);
      
      // Wait for transaction confirmation
      const receipt = await tx.wait();
      if (!receipt) {
        throw new Error('Transaction failed - no receipt received');
      }
      console.log('Transaction confirmed:', receipt.hash);
      
      // Create bet data with signature and transaction hash
      const betData = { 
        id: `${market.id}-${side}-${Date.now()}`, 
        userId: address, 
        marketId: String(market.id), 
        amount: betAmount, 
        fee: fee,
        totalAmount: totalAmount,
        side: side, 
        timestamp: Date.now(),
        signature: signature,
        message: betMessage,
        treasuryTxHash: receipt.hash
      };
      
      console.log('Creating bet with signature and payment:', betData);
      
      // Add bet to Redux store
      dispatch(addBet(betData));
      
      // Save to localStorage for persistence
      const existingBets = JSON.parse(localStorage.getItem('sonic_user_bets') || '{}');
      if (!existingBets[address]) {
        existingBets[address] = [];
      }
      existingBets[address].push(betData);
      localStorage.setItem('sonic_user_bets', JSON.stringify(existingBets));
      
      // Show success modal instead of alert
      setSuccessBetData({
        side: betData.side,
        amount: betData.amount,
        fee: betData.fee,
        totalAmount: betData.totalAmount,
        marketTitle: market.title,
        treasuryTxHash: betData.treasuryTxHash
      });
      setShowSuccessModal(true);
      
    } catch (error) {
      console.error('Bet failed:', error);
      
      let notificationType: 'success' | 'error' | 'warning' | 'info' = 'error';
      let notificationTitle = 'Bet Failed';
      let notificationMessage = 'Failed to place bet. Please try again.';
      let notificationDetails = '';
      
      if (error instanceof Error) {
        notificationMessage = error.message;
        
        // Check for specific error types
        if (error.message.includes('Insufficient balance')) {
          notificationType = 'error';
          notificationTitle = 'Insufficient Balance';
          notificationMessage = 'You don\'t have enough S tokens to place this bet.';
        } else if (error.message.includes('user rejected') || error.message.includes('User rejected')) {
          notificationType = 'warning';
          notificationTitle = 'Transaction Rejected';
          notificationMessage = 'You signed the bet message but rejected the transaction.';
        } else if (error.message.includes('network') || error.message.includes('Network')) {
          notificationType = 'error';
          notificationTitle = 'Network Error';
          notificationMessage = 'There was a problem with the network connection.';
        }
        
        notificationDetails = error.message;
      }
      
      // Show global notification
      showNotification({
        type: notificationType,
        title: notificationTitle,
        message: notificationMessage,
        details: notificationDetails,
        autoClose: true,
        duration: 8000 // 8 seconds for user to read
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card onClick={handleCardClick}>
      {market.txHash && explorerTxUrl && (
        <TxBadge onClick={(e) => e.stopPropagation()}>
          <a href={explorerTxUrl} target="_blank" rel="noopener noreferrer">TX: {shortTx}</a>
        </TxBadge>
      )}
      <CardHeader>
        <StatusBadge $status={getStatusColor()}>
          {getStatusIcon()}
          {market.status === "open" ? "Open" : market.status === "resolved" ? (market.result === "yes" ? "Yes Won" : "No Won") : "Closed"}
        </StatusBadge>
        <TimeLeft>
          {market.status === "open" ? (
            <>
              <FaCalendarAlt />
              {daysLeft > 0 ? `${daysLeft} days left` : "Closing soon"}
            </>
          ) : (
            <>
              <FaCheckCircle />
              Resolved
            </>
          )}
        </TimeLeft>
      </CardHeader>
      <CardContent>
        <div style={{ cursor: "default" }}>
          <Title>{market.title}</Title>
          <Description>{market.description}</Description>
        </div>
        <StatsRow>
          <Stat>
            <StatIcon>
              <FaCoins />
            </StatIcon>
            <StatContent>
              <StatValue>{totalPool.toFixed(2)} S</StatValue>
              <StatLabel>Total Pool</StatLabel>
            </StatContent>
          </Stat>
          <Stat>
            <StatIcon>
              <FaUsers />
            </StatIcon>
            <StatContent>
              <StatValue>{totalBets}</StatValue>
              <StatLabel>Bets</StatLabel>
            </StatContent>
          </Stat>
          <Stat>
            <StatIcon>
              <FaChartLine />
            </StatIcon>
            <StatContent>
              <StatValue>{volume.toFixed(2)} S</StatValue>
              <StatLabel>Volume</StatLabel>
            </StatContent>
          </Stat>
        </StatsRow>
        
        {/* User's bets on this market */}
        {userBets.length > 0 && (
          <UserBetsRow>
            <UserBetLabel>Your Bets:</UserBetLabel>
            {userYesBets > 0 && (
              <UserBetItem $side="yes">
                <span>YES: {userYesBets.toFixed(2)} S</span>
              </UserBetItem>
            )}
            {userNoBets > 0 && (
              <UserBetItem $side="no">
                <span>NO: {userNoBets.toFixed(2)} S</span>
              </UserBetItem>
            )}
          </UserBetsRow>
        )}
        <InfoRow>
          <Info>
            <InfoLabel>YES Price</InfoLabel>
            <InfoValue>0.5 S</InfoValue>
          </Info>
          <Info>
            <InfoLabel>NO Price</InfoLabel>
            <InfoValue>0.5 S</InfoValue>
          </Info>
          <Info>
            <InfoLabel>Fee</InfoLabel>
            <InfoValue>0.5%</InfoValue>
          </Info>
        </InfoRow>

        <BuyRow>
          <QtyInput type="number" min={1} value={qty} onChange={(e) => setQty(Math.max(1, Number(e.target.value)))} />
          <BuyButton disabled={!isConnected || loading !== false} onClick={async (e) => { 
            e.stopPropagation(); 
            await handleBet('yes');
          }}>Buy YES</BuyButton>
          <BuyButton disabled={!isConnected || loading !== false} onClick={async (e) => { 
            e.stopPropagation(); 
            await handleBet('no');
          }}>Buy NO</BuyButton>
        </BuyRow>
        
        {/* Fee calculation display */}
        <FeeRow>
          <FeeInfo>
            <FeeLabel>Bet Amount:</FeeLabel>
            <FeeValue>{(qty * 0.5).toFixed(4)} S</FeeValue>
          </FeeInfo>
          <FeeInfo>
            <FeeLabel>Fee (0.5%):</FeeLabel>
            <FeeValue>{calculateBetFee(qty * 0.5).toFixed(4)} S</FeeValue>
          </FeeInfo>
          <FeeInfo>
            <FeeLabel>Total:</FeeLabel>
            <FeeValue style={{ fontWeight: 'bold', color: '#7f5af0' }}>
              {calculateTotalBetAmount(qty * 0.5).toFixed(4)} S
            </FeeValue>
          </FeeInfo>
        </FeeRow>
        <QuickRow>
          {[1,5,10,20].map(v => (
            <QuickBtn key={v} onClick={(e)=>{ e.stopPropagation(); setQty(v); }}>{v}</QuickBtn>
          ))}
        </QuickRow>
      </CardContent>
      <CardFooter>
        <ProbRow>
          <ProbLabel>Estimated YES probability</ProbLabel>
          <ProbValue>{yesProb}%</ProbValue>
        </ProbRow>
      </CardFooter>
      <BetSuccessModal
        isOpen={showSuccessModal}
        onClose={() => setShowSuccessModal(false)}
        betData={successBetData}
      />
    </Card>
  );
}

const Card = styled.div`
  background: rgba(255, 255, 255, 0.05);
  border-radius: 20px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.1);
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  overflow: visible;
  position: relative;
  z-index: 1;
  will-change: transform;
  transform: translateZ(0);
  backdrop-filter: blur(10px);
  
  &:hover {
    transform: translateY(-6px) translateZ(0);
    box-shadow: 0 16px 48px rgba(127, 90, 240, 0.2);
    border-color: rgba(127, 90, 240, 0.3);
    background: rgba(255, 255, 255, 0.08);
  }
  
  @media (max-width: 600px) {
    border-radius: 16px;
  }
`;

const TxBadge = styled.div`
  position: absolute;
  top: 14px;
  left: 50%;
  transform: translateX(-50%);
  background: linear-gradient(135deg, #7F5AF0 0%, #2CB67D 100%);
  color: #fff;
  border-radius: 10px;
  padding: 4px 10px;
  font-size: 10px;
  font-weight: 800;
  line-height: 1;
  z-index: 3;
  box-shadow: 0 4px 16px rgba(127, 90, 240, 0.3);
  border: 1px solid rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(10px);
  a { color: #fff; text-decoration: none; }
`;

const CardHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 24px 16px 24px;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  @media (max-width: 600px) {
    padding: 16px 20px 12px 20px;
  }
`;

const StatusBadge = styled.div<{ $status: string }>`
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  backdrop-filter: blur(10px);
  
  background: ${({ $status }) => {
    if ($status === "green") return "rgba(44, 182, 125, 0.2)";
    if ($status === "red") return "rgba(242, 95, 76, 0.2)";
    return "rgba(127, 90, 240, 0.2)";
  }};
  
  color: ${({ $status }) => {
    if ($status === "green") return "#2CB67D";
    if ($status === "red") return "#F25F4C";
    return "#7F5AF0";
  }};
  
  border: 1px solid ${({ $status }) => {
    if ($status === "green") return "rgba(44, 182, 125, 0.3)";
    if ($status === "red") return "rgba(242, 95, 76, 0.3)";
    return "rgba(127, 90, 240, 0.3)";
  }};
  
  svg {
    font-size: 12px;
  }
`;

const TimeLeft = styled.div`
  display: flex;
  align-items: center;
  gap: 6px;
  color: #A1A1AA;
  font-size: 12px;
  font-weight: 500;
  
  svg {
    font-size: 12px;
  }
`;

const CardContent = styled.div`
  padding: 20px 24px;
  flex: 1;
  @media (max-width: 600px) {
    padding: 16px 20px;
  }
`;

const Title = styled.h3`
  color: #7F5AF0;
  margin: 0 0 8px 0;
  font-size: 1.2rem;
  font-weight: 600;
  line-height: 1.4;
  @media (max-width: 600px) {
    font-size: 1.1rem;
    margin-bottom: 6px;
  }
`;

const Description = styled.p`
  color: #A1A1AA;
  margin: 0 0 20px 0;
  font-size: 14px;
  line-height: 1.5;
  @media (max-width: 600px) {
    font-size: 13px;
    margin-bottom: 16px;
  }
`;

const StatsRow = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
  margin-bottom: 20px;
  @media (max-width: 600px) {
    gap: 12px;
    margin-bottom: 16px;
  }
`;

const Stat = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  background: ${({ theme }) => theme.colors.background};
  border-radius: 12px;
  @media (max-width: 600px) {
    padding: 10px;
    gap: 8px;
  }
`;

const StatIcon = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  background: ${({ theme }) => `${theme.colors.primary}20`};
  color: ${({ theme }) => theme.colors.primary};
  border-radius: 8px;
  font-size: 14px;
  flex-shrink: 0;
  @media (max-width: 600px) {
    width: 28px;
    height: 28px;
    font-size: 12px;
  }
`;

const StatContent = styled.div`
  flex: 1;
`;

const StatValue = styled.div`
  color: ${({ theme }) => theme.colors.primary};
  font-size: 16px;
  font-weight: 700;
  margin-bottom: 2px;
  @media (max-width: 600px) {
    font-size: 14px;
  }
`;

const StatLabel = styled.div`
  color: #A1A1AA;
  font-size: 11px;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  @media (max-width: 600px) {
    font-size: 10px;
  }
`;

const InfoRow = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
  @media (max-width: 600px) {
    gap: 12px;
  }
`;

const Info = styled.div`
  display: flex;
  flex-direction: column;
  gap: 4px;
`;

const InfoLabel = styled.span`
  color: #A1A1AA;
  font-size: 11px;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
`;

const InfoValue = styled.span`
  color: ${({ theme }) => theme.colors.text};
  font-size: 14px;
  font-weight: 600;
  @media (max-width: 600px) {
    font-size: 13px;
  }
`;

const CardFooter = styled.div`
  padding: 20px 24px;
  border-top: 1px solid ${({ theme }) => theme.colors.border};
  @media (max-width: 600px) {
    padding: 16px 20px;
  }
`;

const BuyRow = styled.div`
  display: grid;
  grid-template-columns: 120px 1fr 1fr;
  gap: 12px;
  margin-top: 16px;
`;

const QtyInput = styled.input`
  padding: 12px;
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: 10px;
  background: ${({ theme }) => theme.colors.background};
  color: ${({ theme }) => theme.colors.text};
`;

const BuyButton = styled.button`
  background: ${({ theme }) => theme.colors.primary};
  color: white;
  border: none;
  border-radius: 12px;
  padding: 12px 16px;
  font-weight: 700;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.2s ease;
  &:disabled { opacity: 0.5; cursor: not-allowed; }
`;

const QuickRow = styled.div`
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 10px;
  margin-top: 10px;
`;

const QuickBtn = styled.button`
  background: ${({ theme }) => theme.colors.card};
  color: ${({ theme }) => theme.colors.primary};
  border: 1px solid ${({ theme }) => theme.colors.primary}33;
  border-radius: 12px;
  padding: 10px 0;
  font-size: 14px;
  font-weight: 800;
  cursor: pointer;
  width: 100%;
  &:hover { background: ${({ theme }) => `${theme.colors.primary}15`}; border-color: ${({ theme }) => theme.colors.primary}; }
`;

const ProbRow = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const ProbLabel = styled.span`
  color: #A1A1AA;
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
`;

const ProbValue = styled.span`
  color: ${({ theme }) => theme.colors.primary};
  font-size: 14px;
  font-weight: 800;
`;

const UserBetsRow = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  margin: 16px 0;
  padding: 12px;
  background: ${({ theme }) => theme.colors.background};
  border-radius: 12px;
  border: 1px solid ${({ theme }) => theme.colors.border};
`;

const UserBetLabel = styled.span`
  color: #A1A1AA;
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
`;

const UserBetItem = styled.span<{ $side: BetSide }>`
  color: ${({ $side }) => $side === 'yes' ? '#2CB67D' : '#F25F4C'};
  font-size: 12px;
  font-weight: 600;
  padding: 4px 8px;
  background: ${({ $side }) => $side === 'yes' ? 'rgba(44, 182, 125, 0.2)' : 'rgba(242, 95, 76, 0.2)'};
  border-radius: 8px;
  border: 1px solid ${({ $side }) => $side === 'yes' ? '#2CB67D' : '#F25F4C'};
`;

const DisabledButton = styled.button`
  flex: 1;
  background: rgba(255, 255, 255, 0.1);
  color: #A1A1AA;
  border: none;
  border-radius: 12px;
  padding: 14px 0;
  font-weight: 600;
  font-size: 14px;
  cursor: not-allowed;
  opacity: 0.6;
  
  @media (max-width: 600px) {
    padding: 12px 0;
    font-size: 13px;
  }
`;

const FeeRow = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 12px;
  margin-top: 16px;
  padding: 12px;
  background: ${({ theme }) => theme.colors.background};
  border-radius: 12px;
  border: 1px solid ${({ theme }) => theme.colors.border};
`;

const FeeInfo = styled.div`
  display: flex;
  flex-direction: column;
  gap: 4px;
`;

const FeeLabel = styled.span`
  color: ${({ theme }) => theme.colors.textSecondary};
  font-size: 11px;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
`;

const FeeValue = styled.span`
  color: ${({ theme }) => theme.colors.text};
  font-size: 14px;
  font-weight: 600;
  @media (max-width: 600px) {
    font-size: 13px;
  }
`;

 